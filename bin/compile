#!/usr/bin/env bash
BUILDPACK_DIR=$(cd "$(dirname $0)" && pwd)

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

TOOL_DIR=$BUILD_DIR/toolchain
ARCHIVE_DIR=$CACHE_DIR/archives
LIB_DIR=$CACHE_DIR/libs
mkdir -p "$TOOL_DIR" "$ARCHIVE_DIR" "$LIB_DIR"

DMD_ARCHIVE_PATH=http://downloads.dlang.org/releases/2015
DMD_ARCHIVE=dmd.2.067.1.linux
DMD_DIR=dmd2
DUB_ARCHIVE=v0.9.23
DUB_ARCHIVE_PATH=https://github.com/D-Programming-Language/dub/archive
DUB_DIR=dub-${DUB_ARCHIVE#v}

indent() {
  sed -u 's/^/       /'
}

# download latest archives
if [ ! -f $ARCHIVE_DIR/$DMD_ARCHIVE.zip ]; then
    echo
    echo "-----> Downloading DMD"
    curl -L $DMD_ARCHIVE_PATH/$DMD_ARCHIVE.zip \
	   -o $ARCHIVE_DIR/$DMD_ARCHIVE.zip
fi | indent

if [ ! -f $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz ]; then
 echo
 echo "-----> Downloading dub package manager"
 curl -L $DUB_ARCHIVE_PATH/$DUB_ARCHIVE.tar.gz \
	 -o $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz
fi | indent


# initialise toolchain
export PATH=$TOOL_DIR/$DMD_DIR/linux/bin64:$TOOL_DIR/$DUB_DIR/bin:$BUILDPACK_DIR:$PATH
echo
echo "-----> Setting PATH: $PATH"
echo
echo "-----> Initializing toolchain"
cd $TOOL_DIR
7za x $ARCHIVE_DIR/$DMD_ARCHIVE.zip > /dev/null
tar xzf $ARCHIVE_DIR/$DUB_ARCHIVE.tar.gz
cd $TOOL_DIR/$DUB_DIR
./build.sh | indent
cd $TOOL_DIR
DUB_BIN=`ls -lh $TOOL_DIR/$DUB_DIR/bin/dub`
echo "-----> DUB package manager cmd found at $DUB_BIN"

## update libcurl for me!
CURL_VER=7.42.1
if [ ! -f $ARCHIVE_DIR/curl.tar.bz2 -a ! -f $BUILD_DIR/lib/libcurl.so ]; then
    echo
    echo "-----> Downloading curl"
    curl http://curl.haxx.se/download/curl-${CURL_VER}.tar.bz2 \
	     -o $ARCHIVE_DIR/curl.tar.bz2
    tar xf $ARCHIVE_DIR/curl.tar.bz2
    cd curl-${CURL_VER}
    ./configure \
        --disable-ldap --disable-ldaps \
        --without-librtmp \
        --without-libssh2
    make
    cp -a lib/.libs/libcurl.so* $LIB_DIR
fi | indent
if [ ! -d $BUILD_DIR/lib ]; then
    mkdir -p $BUILD_DIR/lib
fi
cp -a $LIB_DIR/* $BUILD_DIR/lib
export LD_LIBRARY_PATH=$BUILD_DIR/lib:$LD_LIBRARY_PATH

echo
echo "-----> Building app"

# link the dub cache to the cache folder
mkdir -p $CACHE_DIR/.dub

if [ ! -e $BUILD_DIR/.dub ]; then
    ln -s $CACHE_DIR/.dub $BUILD_DIR/.dub
fi

export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/app/opt/lib/pkgconfig

# if dub.json or package.json has contents, run dub build
status=1
if [ ! -s $BUILD_DIR/dub.json -a ! -s $BUILD_DIR/package.json ]; then
  echo
  echo "!!! dub.json was empty" | indent
  status=1
else
  # pre-build hook
  cd $BUILD_DIR
  if [ -f dub-prebuild ]; then
    echo
    echo "Running dub-prebuild…" | indent
    ./dub-prebuild "$BUILD_DIR" "$CACHE_DIR" | indent
    #chmod 755 /app/opt/lib/pkgconfig
  fi

  echo
  echo "Running dub build…" | indent
  if dub build --build=plain; then
    echo
    echo "Build was successful" | indent
    status=0
  else
    echo
    echo "!!! Build failed" | indent
    status=1
  fi
fi

# post-build hook
cd $BUILD_DIR
if [ -f dub-postbuild ]; then
    echo
    echo "Running dub-postbuild…" | indent
    ./dub-postbuild "$BUILD_DIR" "$CACHE_DIR" | indent
fi

# clean up any remaining sources
rm -rf "$TOOL_DIR" source src views

exit $status
